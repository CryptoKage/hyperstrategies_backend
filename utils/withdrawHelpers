// utils/withdrawHelpers.js
const { ethers } = require('ethers');
const pool = require('../db');

// Constants
const USDC_ADDRESS = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';
const USDT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';

// Minimal ERC20 ABI for transfer and decimals
const ERC20_ABI = [
  "function transfer(address to, uint amount) public returns (bool)",
  "function decimals() public view returns (uint8)",
  "function symbol() public view returns (string)"
];

function getTokenAddress(token) {
  switch (token.toLowerCase()) {
    case 'usdc': return USDC_ADDRESS;
    case 'usdt': return USDT_ADDRESS;
    default: throw new Error(`Unsupported token: ${token}`);
  }
}

function getTokenAbi() {
  return ERC20_ABI;
}

async function getUserWallet(userId) {
  const { rows } = await pool.query(
    `SELECT eth_address FROM users WHERE user_id = $1`,
    [userId]
  );
  return rows[0];
}

async function estimateGasForTokenTransfer({ provider, fromAddress, toAddress, tokenAddress, amount }) {
  const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);
  const decimals = await contract.decimals();
  const value = ethers.utils.parseUnits(amount.toString(), decimals);

  const gasLimit = await contract.estimateGas.transfer(toAddress, value, { from: fromAddress });
  const gasPrice = await provider.getGasPrice();
  const totalGasCost = gasLimit.mul(gasPrice);

  return {
    gasLimit,
    gasPrice,
    totalGasCost
  };
}

async function getEthUsdPrice() {
  try {
    const res = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
    const data = await res.json();
    return data.ethereum.usd;
  } catch (err) {
    console.error('Failed to fetch ETH price from CoinGecko', err);
    return 0;
  }
}

module.exports = {
  getTokenAddress,
  getTokenAbi,
  getUserWallet,
  estimateGasForTokenTransfer,
  getEthUsdPrice
};
